import streamlit as st
import pandas as pd
import requests
from sqlalchemy import create_engine
from ydata_profiling import ProfileReport
from streamlit.components.v1 import html

# Configuration globale
st.set_page_config(page_title="DataStack - Data Engineering App", layout="wide")

# === Fonctionnalit√©s G√©n√©rales ===

def load_local_file(file, delimiter):
    """Charger un fichier local (CSV, Excel, etc.) avec un d√©limiteur d√©fini."""
    try:
        if file.name.endswith(".csv"):
            return pd.read_csv(file, delimiter=delimiter)
        elif file.name.endswith(".xlsx"):
            return pd.read_excel(file)
        else:
            st.error("Type de fichier non support√©. Veuillez utiliser un fichier CSV ou Excel.")
            return None
    except Exception as e:
        st.error(f"Erreur lors du chargement du fichier : {e}")
        return None

def load_from_database(connection_string, query):
    """Charger des donn√©es √† partir d'une base de donn√©es via SQLAlchemy."""
    try:
        engine = create_engine(connection_string)
        with engine.connect() as conn:
            return pd.read_sql(query, conn)
    except Exception as e:
        st.error(f"Erreur de connexion √† la base de donn√©es : {e}")
        return None

def load_from_api(api_url, headers, params):
    """Charger des donn√©es depuis une API."""
    try:
        response = requests.get(api_url, headers=headers, params=params)
        response.raise_for_status()  # L√®ve une exception pour les erreurs HTTP
        data = response.json()  # D√©coder la r√©ponse JSON
        if isinstance(data, list):
            return pd.DataFrame(data)
        elif isinstance(data, dict) and 'data' in data:
            return pd.DataFrame(data['data'])
        else:
            st.error("Format des donn√©es API non support√©. Attendu : liste ou dictionnaire avec cl√© 'data'.")
            return None
    except Exception as e:
        st.error(f"Erreur lors de la connexion √† l'API : {e}")
        return None

def clean_data(df):
    """Nettoyer les donn√©es (exemple simplifi√©)."""
    df = df.dropna()  # Supprime les valeurs manquantes
    df = df.drop_duplicates()  # Supprime les doublons
    return df

def explore_data(df):
    """Effectuer une EDA simple."""
    st.write("**R√©sum√© statistique**")
    st.write(df.describe())

def generate_profile_report(df):
    """G√©n√©rer un rapport de profilage interactif."""
    profile = ProfileReport(df, title="Rapport EDA", explorative=True)
    profile.to_file("eda_report.html")
    with open("eda_report.html", "r", encoding="utf-8") as f:
        report_html = f.read()
    html(report_html, height=1000, scrolling=True)

# === Interface Utilisateur ===
st.title("üõ†Ô∏è DataStack - Plateforme de Data Engineering")

# 1. S√©lection de la source de donn√©es
st.sidebar.header("1Ô∏è‚É£ Charger les donn√©es")
source_type = st.sidebar.radio(
    "Choisissez la source de donn√©es",
    options=["Fichier local", "Base de donn√©es", "API"]
)

data = None

if source_type == "Fichier local":
    uploaded_file = st.sidebar.file_uploader("T√©l√©versez votre fichier", type=["csv", "xlsx"])
    delimiter = st.sidebar.text_input("D√©limiteur (par d√©faut : ',')", value=",")
    if uploaded_file is not None:
        data = load_local_file(uploaded_file, delimiter)

elif source_type == "Base de donn√©es":
    db_connection = st.sidebar.text_input("Cha√Æne de connexion (SQLAlchemy)", "")
    db_query = st.sidebar.text_area("Requ√™te SQL", "SELECT * FROM your_table")
    if st.sidebar.button("Charger depuis la base de donn√©es"):
        data = load_from_database(db_connection, db_query)

elif source_type == "API":
    api_url = st.sidebar.text_input("URL de l'API", "https://api.example.com/data")
    headers_input = st.sidebar.text_area("En-t√™tes (format JSON)", '{"Authorization": "Bearer YOUR_TOKEN"}')
    params_input = st.sidebar.text_area("Param√®tres (format JSON)", '{"key1": "value1", "key2": "value2"}')

    # Convertir les entr√©es texte en dictionnaires
    headers = {}
    params = {}
    try:
        if headers_input:
            headers = eval(headers_input)  # Convertir la cha√Æne JSON en dictionnaire
        if params_input:
            params = eval(params_input)
    except Exception as e:
        st.error(f"Erreur dans le format des en-t√™tes ou des param√®tres : {e}")

    if st.sidebar.button("Charger depuis l'API"):
        data = load_from_api(api_url, headers, params)

# 2. Traiter les donn√©es
if data is not None:
    st.sidebar.header("2Ô∏è‚É£ Traiter les donn√©es")
    action = st.sidebar.selectbox(
        "Choisissez une action",
        options=["Aper√ßu des donn√©es", "Nettoyage des donn√©es", "EDA (Exploration des donn√©es)"]
    )
    
    # Aper√ßu des donn√©es
    if action == "Aper√ßu des donn√©es":
        st.subheader("üîç Aper√ßu des donn√©es")
        st.dataframe(data.head())  # Afficher un aper√ßu des donn√©es
    
    # Nettoyage des donn√©es
    elif action == "Nettoyage des donn√©es":
        st.subheader("üßπ Nettoyage des donn√©es")
        cleaned_data = clean_data(data)  # Nettoyage des donn√©es
        st.dataframe(cleaned_data)  # Afficher les donn√©es nettoy√©es
        
        # T√©l√©charger les donn√©es nettoy√©es
        st.download_button(
            "T√©l√©charger les donn√©es nettoy√©es",
            data=cleaned_data.to_csv(index=False),
            file_name="cleaned_data.csv"
        )
        
    # Exploration des donn√©es
    elif action == "EDA (Exploration des donn√©es)":
        st.subheader("üìä Exploration des donn√©es")
        st.sidebar.info("Un peu de patience...")
        if st.sidebar.button("G√©n√©rer un rapport de profilage interactif"):
            with st.spinner("G√©n√©ration du rapport..."):
                generate_profile_report(data)


# 3. Construction de pipeline ETL
if data is not None:
    st.sidebar.header("3Ô∏è‚É£ Conception BDD")
    steps = st.sidebar.selectbox(
        "Conception BDD",
        options=["Aucune action", "Cr√©ation tables", "Cr√©ation contrainte", "G√©n√©ration sch√©ma"],
        index=0
    )
    
    # Transformation des donn√©es (Cr√©ation de tables de faits et dimensions)
    if steps == "Cr√©ation tables":
        st.subheader("üîÑ Cr√©ation tables de faits et dimensions")
    
        # V√©rifier si les donn√©es ont √©t√© nettoy√©es
        if 'cleaned_data' in locals():
            transformation_data = cleaned_data  # Utiliser les donn√©es nettoy√©es
        else:
            transformation_data = data
            st.warning("‚ö†Ô∏è Les donn√©es brutes seront utilis√©es car aucune √©tape de nettoyage n'a √©t√© effectu√©e.")
        
        # Cr√©ation de la table de faits
        st.write("#### S√©lectionnez les colonnes pour la Table de Faits")
        fact_columns = st.multiselect(
            "Colonnes pour la Table de Faits",
            options=transformation_data.columns
        )
    
        # V√©rifier si des colonnes pour la table de faits ont √©t√© s√©lectionn√©es
        if fact_columns:
            fact_table = transformation_data[fact_columns]
            fact_table.insert(0, 'ID', range(1, len(fact_table) + 1))  # Ajouter une colonne ID
            st.write("#### Table de Faits")
            st.dataframe(fact_table.head())
            
            # Bouton pour t√©l√©charger la table de faits
            st.download_button(
                label="T√©l√©charger la Table de Faits",
                data=fact_table.to_csv(index=False),
                file_name="fact_table.csv",
                mime="text/csv"
            )
        else:
            st.warning("Veuillez s√©lectionner des colonnes pour la Table de Faits.")
    
        # Interface pour d√©finir plusieurs tables de dimensions
        st.write("#### D√©finir des Tables de Dimensions")
        num_dimensions = st.number_input(
            "Combien de tables de dimensions voulez-vous cr√©er ?",
            min_value=1,
            max_value=10,
            value=1,
            step=1
        )
    
        dimension_tables = []  # Liste pour stocker les tables de dimensions
        dimension_names = []   # Liste pour stocker les noms des tables

        for i in range(num_dimensions):
            st.write(f"##### Table de Dimensions {i + 1}")
            
            # Saisir un nom pour la table
            dimension_name = st.text_input(f"Nom pour la Table de Dimensions {i + 1}", value=f"Dimension_{i + 1}")
            dimension_names.append(dimension_name)

            # S√©lection des colonnes pour cette table
            dimension_columns = st.multiselect(
                f"Colonnes pour la Table {dimension_name}",
                options=transformation_data.columns,
                key=f"dim_columns_{i}"  # Cl√© unique pour chaque widget
            )
        
            if dimension_columns:
                # Cr√©er la table de dimensions
                dimension_table = transformation_data[dimension_columns]
                dimension_table.insert(0, f"{dimension_name}ID", range(1, len(dimension_table) + 1))  # Ajouter une colonne ID
                dimension_tables.append(dimension_table)
                
                st.write(f"Table de Dimensions : **{dimension_name}**")
                st.dataframe(dimension_table.head())
                
                # Bouton pour t√©l√©charger la table
                st.download_button(
                    label=f"T√©l√©charger la Table {dimension_name}",
                    data=dimension_table.to_csv(index=False),
                    file_name=f"{dimension_name}.csv",
                    mime="text/csv"
                )
            else:
                st.warning(f"Veuillez s√©lectionner des colonnes pour la Table de Dimensions {i + 1}.")

    
    if st.sidebar.button("Ex√©cuter"):
        st.subheader("‚öôÔ∏è Conception BDD")
        st.write(f"√âtapes s√©lectionn√©es : {steps}")
        if "Cr√©ation tables" in steps:
            st.write("‚úîÔ∏è Tables cr√©√©es.")
        if "Cr√©ation contrainte" in steps:
            st.write("‚úîÔ∏è Contraintes cr√©√©es.")
        if "G√©n√©ration sch√©ma" in steps:
            st.write("‚úîÔ∏è Sch√©ma g√©n√©r√©.")